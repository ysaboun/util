Voici un **r√©sum√© clair et professionnel du pattern Saga** √† placer dans une page Confluence, avec un petit sch√©ma ASCII simple que tout lecteur comprendra (et qui s‚Äôaffiche bien sans image).

---

## üß© **Pattern Saga ‚Äì Gestion des transactions distribu√©es**

### üîç D√©finition

Le **pattern Saga** est un mod√®le architectural utilis√© pour garantir la **coh√©rence des donn√©es dans les syst√®mes distribu√©s** (microservices), sans recourir √† une transaction globale (`2PC`).
Une saga est compos√©e d‚Äôune **suite de transactions locales**.
Si l‚Äôune √©choue, des **actions compensatoires** sont ex√©cut√©es pour annuler les √©tapes pr√©c√©dentes.

---

### ‚öôÔ∏è **Principe de fonctionnement**

* Chaque **microservice** ex√©cute une **transaction locale** (atomique et autonome).
* Si une √©tape √©choue, les **transactions pr√©c√©dentes sont compens√©es**.
* Le flux global peut √™tre g√©r√© selon deux modes :

  * **Chor√©graphie** : coordination distribu√©e via des √©v√©nements.
  * **Orchestration** : coordination centralis√©e par un orchestrateur.

---

### üß≠ **Modes de coordination**

| Crit√®re       | **Chor√©graphie**                   | **Orchestration**                      |
| :------------ | :--------------------------------- | :------------------------------------- |
| Contr√¥le      | Distribu√©                          | Centralis√©                             |
| Communication | √âv√©nements asynchrones             | Appels directs (souvent synchrones)    |
| Couplage      | Faible                             | Plus fort                              |
| Tra√ßabilit√©   | Complexe                           | Simple                                 |
| Avantages     | Autonomie des services, extensible | Flux clair, pilot√©, facile √† monitorer |
| Inconv√©nients | Difficult√© de suivi                | Risque de point unique de d√©faillance  |

---

### ü™∂ **Sch√©ma simplifi√©**

#### 1. Mode *Chor√©graphie*

```
[Service A] --(√âv√©nement 1)--> [Service B] --(√âv√©nement 2)--> [Service C]
       ‚Üë                                        |
       |-----------(√âv√©nement d'√©chec)-----------|
```

#### 2. Mode *Orchestration*

```
            +---------------------+
            |   Orchestrateur     |
            +----------+----------+
                       |
     +-----------------+-----------------+
     |                 |                 |
[Service A]       [Service B]       [Service C]
   | (succ√®s)        | (√©chec)          |
   +-------> Compensation d√©clench√©e <---+
```

---

### üí° **Cas d‚Äôusage typiques**

* R√©servation de voyage (vol, h√¥tel, voiture).
* Commande e-commerce (cr√©ation, paiement, livraison).
* Processus m√©tiers multi-domaines n√©cessitant rollback partiel.

---

### üß± **Bonnes pratiques**

* Utiliser un **trace ID** pour suivre les √©v√©nements d‚Äôune saga.
* Pr√©voir un **m√©canisme d‚Äôoutbox** pour fiabiliser la publication d‚Äô√©v√©nements.
* Impl√©menter des **actions compensatoires idempotentes** (sans effet secondaire multiple).
* Surveiller la **dur√©e et l‚Äô√©tat des sagas** (monitoring, dashboards).

---

Souhaites-tu que je te pr√©pare une version **Confluence pr√™te √† copier-coller** (avec mise en forme Confluence : titres, panneaux info, couleurs, etc.) ?

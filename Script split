Voici un script Node.js natif qui lit le fichier `fbrute.csv`, extrait les colonnes `icm` et `idneutre`, puis écrit les valeurs dans des fichiers `ficm.txt` et `fidneutre.txt` avec une limite de 250 éléments par fichier tout en gardant l'ordre des correspondances.  

### Script : `extract.js`
```javascript
const fs = require("fs");
const path = require("path");

// Fichier source CSV
const inputFile = "fbrute.csv";
const CHUNK_SIZE = 250; // Taille limite par fichier

// Lecture du fichier CSV
fs.readFile(inputFile, "utf8", (err, data) => {
  if (err) {
    console.error("Erreur lors de la lecture du fichier:", err);
    return;
  }

  // Découpage en lignes et suppression des espaces blancs
  const lines = data.trim().split("\n");

  // Suppression de l'en-tête
  lines.shift();

  // Extraction des colonnes
  const icms = [];
  const idneutres = [];

  lines.forEach(line => {
    const [icm, idneutre] = line.split(";");
    if (icm && idneutre) {
      icms.push(icm);
      idneutres.push(`"${idneutre}"`);
    }
  });

  // Découpage en morceaux de 250 éléments max
  for (let i = 0, part = 1; i < icms.length; i += CHUNK_SIZE, part++) {
    const icmChunk = icms.slice(i, i + CHUNK_SIZE);
    const idneutreChunk = idneutres.slice(i, i + CHUNK_SIZE);

    // Création des fichiers de sortie
    const ficmFile = `ficm_${part}.txt`;
    const fidneutreFile = `fidneutre_${part}.txt`;

    // Écriture des fichiers
    fs.writeFileSync(ficmFile, `'${icmChunk.join("','")}'`, "utf8");
    fs.writeFileSync(fidneutreFile, `'${idneutreChunk.join("','")}'`, "utf8");

    console.log(`Fichiers générés: ${ficmFile}, ${fidneutreFile}`);
  }
});
```

### Explication :
1. **Lecture du fichier CSV** en supprimant l'en-tête.
2. **Extraction des colonnes** `icm` et `idneutre` en conservant les correspondances.
3. **Segmentation en fichiers** de 250 éléments maximum.
4. **Écriture des fichiers de sortie** (`ficm_1.txt`, `fidneutre_1.txt`, etc.).

### Exécution :
Placez le script dans le même dossier que `fbrute.csv` et exécutez :
```sh
node extract.js
```

Vous obtiendrez des fichiers :
- `ficm_1.txt` → `'icm1','icm2',...'icm250'`
- `fidneutre_1.txt` → `'"idneutre1"','"idneutre2"',...'"idneutre250"'`
- `ficm_2.txt`, `fidneutre_2.txt` (si plus de 250 lignes)

Ce script garantit que les correspondances `icm` ↔ `idneutre` restent intactes.

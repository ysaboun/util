Pour ajouter la configuration des **hosts** et simuler `site.fr` et `sous-domaine.site.fr` en local, voici les Ã©tapes Ã  suivre :

---

### **1. Modifier le fichier `hosts`**
Tu dois ajouter ces lignes dans ton fichier **hosts** pour rediriger les domaines vers `localhost` :

#### **Windows**
1. Ouvre **Notepad** en mode administrateur.
2. Ã‰dite le fichier :  
   ```
   C:\Windows\System32\drivers\etc\hosts
   ```
3. Ajoute ces lignes Ã  la fin :
   ```
   127.0.0.1 site.fr
   127.0.0.1 sous-domaine.site.fr
   ```

#### **Mac/Linux**
1. Ouvre le terminal et tape :
   ```sh
   sudo nano /etc/hosts
   ```
2. Ajoute ces lignes :
   ```
   127.0.0.1 site.fr
   127.0.0.1 sous-domaine.site.fr
   ```
3. Sauvegarde avec `CTRL + X`, puis `Y` et `EntrÃ©e`.

---

### **2. Modifier le serveur `Node.js`**
Dans `server.js`, adapte le serveur pour rÃ©pondre aux deux domaines :

#### **Mise Ã  jour de `server.js`**
```js
const http = require('http');
const fs = require('fs');
const path = require('path');

const serveFile = (filePath, res, contentType) => {
    fs.readFile(filePath, (err, data) => {
        if (err) {
            res.writeHead(404);
            res.end('Not Found');
        } else {
            res.writeHead(200, { 'Content-Type': contentType });
            res.end(data);
        }
    });
};

const server = http.createServer((req, res) => {
    const host = req.headers.host; // RÃ©cupÃ¨re le domaine appelÃ©
    let filePath = null;

    if (host === 'site.fr') {
        filePath = `./main-site${req.url === '/' ? '/index.html' : req.url}`;
    } else if (host === 'sous-domaine.site.fr') {
        filePath = `./sub-site${req.url === '/' ? '/index.html' : req.url}`;
    } else {
        res.writeHead(403);
        return res.end('AccÃ¨s refusÃ©');
    }

    const ext = path.extname(filePath);
    let contentType = 'text/html';
    if (ext === '.js') contentType = 'application/javascript';

    serveFile(filePath, res, contentType);
});

server.listen(80, () => {
    console.log('Serveur en cours d\'exÃ©cution sur http://site.fr et http://sous-domaine.site.fr');
});
```

---

### **3. Lancer le serveur**
1. **ExÃ©cute le script en mode administrateur** (port 80 nÃ©cessite des privilÃ¨ges Ã©levÃ©s) :
   ```sh
   sudo node server.js  # Linux/Mac
   ```

   **Sur Windows**, ouvre un terminal **en administrateur** et lance :
   ```sh
   node server.js
   ```

2. **Teste dans un navigateur :**
   - Ouvre **http://site.fr** â†’ Il doit afficher le site principal.
   - Ouvre **http://sous-domaine.site.fr** â†’ Il doit afficher le sous-domaine.

---

### **4. Modifier `postMessage` et les URL dans le code**
Dans `main-site/script.js` et `sub-site/script.js`, mets Ã  jour les **origines** :

#### **`main-site/script.js`**
```js
const iframe = document.getElementById("subFrame");
iframe.src = "http://sous-domaine.site.fr"; // Mettre Ã  jour l'URL de l'iframe

sendButton.addEventListener("click", () => {
    const token = "secret-token-123";
    iframe.contentWindow.postMessage({ type: "TOKEN", token }, "http://sous-domaine.site.fr");
});

window.addEventListener("message", (event) => {
    if (event.origin !== "http://sous-domaine.site.fr") return;
    console.log("Message reÃ§u du sous-domaine :", event.data);
});
```

#### **`sub-site/script.js`**
```js
window.addEventListener("message", (event) => {
    if (event.origin !== "http://site.fr") return;
    
    if (event.data.type === "TOKEN") {
        navigator.serviceWorker.controller.postMessage(event.data);
    }
    
    event.source.postMessage({ type: "ACK", message: "Token reÃ§u" }, event.origin);
});
```

---

### **5. Tester l'intÃ©gration**
- **DÃ©marre ton serveur.**
- **Va sur `http://site.fr`** et clique sur "Envoyer Token".
- VÃ©rifie que le **sous-domaine (`sous-domaine.site.fr`) reÃ§oit et stocke le token**.

---

### **6. RÃ©solution des erreurs courantes**
âœ… **Si tu as une erreur "AccÃ¨s refusÃ©"** â†’ VÃ©rifie que ton fichier `hosts` est bien modifiÃ©.  
âœ… **Si `postMessage` ne fonctionne pas** â†’ VÃ©rifie que les **origines sont bien mises Ã  jour**.  
âœ… **Si le port 80 est bloquÃ©** â†’ Utilise un autre port, par exemple `8080` et mets `127.0.0.1 site.fr:8080`.

---

## **ðŸŽ¯ Conclusion**
Avec cette config, tu peux **tester en local comme si c'Ã©tait de vrais domaines** avec `postMessage` et `Service Workers` !

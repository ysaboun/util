Voici la traduction de votre code JavaScript en Java. En Java, les tableaux et les listes sont gérés différemment, et il n'y a pas de méthode `find` directement équivalente à celle de JavaScript. Cependant, vous pouvez utiliser une boucle ou des méthodes de la classe `List` pour obtenir un comportement similaire.

### Code Java équivalent :

```java
import java.util.Arrays;
import java.util.List;

public class Main {
    public static void main(String[] args) {
        // Données mockées
        String passwordMock = "cccc";
        List<String> usernameMock = Arrays.asList("icm1", "icm2");

        // Nom d'utilisateur à vérifier
        String icm = "icm1"; // Remplacez par la valeur que vous souhaitez vérifier

        // Vérification si le nom d'utilisateur existe dans la liste
        if (usernameMock.contains(icm)) {
            String password = passwordMock; // Affectation du mot de passe
            System.out.println("Mot de passe défini : " + password);
        } else {
            System.out.println("Nom d'utilisateur non trouvé.");
        }
    }
}
```

---

### Explication du code :
1. **Données mockées** :
   - `passwordMock` est une chaîne de caractères représentant le mot de passe.
   - `usernameMock` est une liste de chaînes de caractères représentant les noms d'utilisateur valides.

2. **Vérification** :
   - La méthode `contains` de la classe `List` est utilisée pour vérifier si la valeur `icm` est présente dans la liste `usernameMock`.

3. **Affectation du mot de passe** :
   - Si le nom d'utilisateur est trouvé, le mot de passe est affecté à la variable `password`.

4. **Sortie** :
   - Le programme affiche un message indiquant si le mot de passe a été défini ou si le nom d'utilisateur n'a pas été trouvé.

---

### Exemple d'exécution :
- Si `icm = "icm1"`, la sortie sera :
  ```
  Mot de passe défini : cccc
  ```
- Si `icm = "icm3"`, la sortie sera :
  ```
  Nom d'utilisateur non trouvé.
  ```

---

### Remarques :
- Si vous avez besoin d'une recherche plus complexe (par exemple, avec des conditions personnalisées), vous pouvez utiliser une boucle `for` ou l'API Stream de Java.
- Si vous travaillez avec des tableaux au lieu de listes, vous pouvez utiliser `Arrays.asList` pour convertir un tableau en liste, ou parcourir le tableau manuellement avec une boucle.

Voici une version utilisant une boucle `for` pour un tableau :

```java
public class Main {
    public static void main(String[] args) {
        // Données mockées
        String passwordMock = "cccc";
        String[] usernameMock = {"icm1", "icm2"};

        // Nom d'utilisateur à vérifier
        String icm = "icm1"; // Remplacez par la valeur que vous souhaitez vérifier

        // Vérification si le nom d'utilisateur existe dans le tableau
        boolean found = false;
        for (String username : usernameMock) {
            if (username.equals(icm)) {
                found = true;
                break;
            }
        }

        // Affectation du mot de passe
        if (found) {
            String password = passwordMock;
            System.out.println("Mot de passe défini : " + password);
        } else {
            System.out.println("Nom d'utilisateur non trouvé.");
        }
    }
}
```

Cette version utilise une boucle `for` pour parcourir le tableau `usernameMock` et vérifie si l'élément `icm` est présent.

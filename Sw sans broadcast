Voici un **Proof of Concept (PoC) JavaScript complet** utilisant `iframe` et `postMessage` pour partager un **token** entre `site.fr` et `sous-domaine.site.fr` √† l'aide de **deux Service Workers**.  
Nous √©vitons `BroadcastChannel` et nous utilisons `postMessage` pour la communication.  

---

### üîπ **Architecture du PoC**
1. **Service Worker sur `site.fr`** : Enregistre le token et communique avec l'iframe via `postMessage`.
2. **Iframe h√©berg√© sur `sous-domaine.site.fr`** : Joue le r√¥le de proxy pour relayer le token.
3. **Service Worker sur `sous-domaine.site.fr`** : Re√ßoit et stocke le token.

---

## üîπ **1. Service Worker sur `site.fr` (`/sw.js`)**
Ce Service Worker stocke un token et r√©pond aux requ√™tes de la page principale.

```js
self.token = null;

self.addEventListener("message", (event) => {
    if (event.data.type === "SET_TOKEN") {
        self.token = event.data.token;
        event.ports[0].postMessage({ status: "TOKEN_SAVED" });
    } else if (event.data.type === "GET_TOKEN") {
        event.ports[0].postMessage({ token: self.token });
    }
});
```

---

## üîπ **2. Page principale sur `site.fr` (`index.html`)**
Cette page injecte un iframe de `sous-domaine.site.fr`, envoie un token et demande sa r√©cup√©ration.

```html
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <title>Parent - site.fr</title>
</head>
<body>
    <h1>Parent (site.fr)</h1>
    <iframe id="relayFrame" src="https://sous-domaine.site.fr/relay.html" style="display:none;"></iframe>

    <script>
        navigator.serviceWorker.register('/sw.js').then(async (registration) => {
            console.log("Service Worker du site principal enregistr√©.");
            
            let sw = await navigator.serviceWorker.ready;
            
            // Envoi du token au SW de site.fr
            let messageChannel = new MessageChannel();
            messageChannel.port1.onmessage = (event) => console.log("R√©ponse SW:", event.data);

            sw.active.postMessage({ type: "SET_TOKEN", token: "SECRET_TOKEN" }, [messageChannel.port2]);
            
            let iframe = document.getElementById("relayFrame");

            // Envoi du token vers l'iframe pour le partager au sous-domaine
            iframe.onload = () => {
                iframe.contentWindow.postMessage({ type: "SHARE_TOKEN", token: "SECRET_TOKEN" }, "https://sous-domaine.site.fr");
            };

            // R√©cup√©ration du token depuis l'iframe
            window.addEventListener("message", (event) => {
                if (event.origin === "https://sous-domaine.site.fr" && event.data.type === "TOKEN_SHARED") {
                    console.log("Token re√ßu depuis le sous-domaine:", event.data.token);
                }
            });
        });
    </script>
</body>
</html>
```

---

## üîπ **3. Page `relay.html` sur `sous-domaine.site.fr`**
Joue le r√¥le de proxy pour transf√©rer le token au Service Worker de `sous-domaine.site.fr`.

```html
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <title>Iframe Relay</title>
</head>
<body>
    <script>
        navigator.serviceWorker.register('/sw.js').then(() => {
            console.log("Service Worker du sous-domaine enregistr√©.");
        });

        window.addEventListener("message", async (event) => {
            if (event.origin === "https://site.fr" && event.data.type === "SHARE_TOKEN") {
                let sw = await navigator.serviceWorker.ready;
                
                let messageChannel = new MessageChannel();
                messageChannel.port1.onmessage = (event) => console.log("R√©ponse SW sous-domaine:", event.data);

                // Envoi au SW du sous-domaine
                sw.active.postMessage({ type: "SET_TOKEN", token: event.data.token }, [messageChannel.port2]);

                // Confirme la r√©ception au parent
                event.source.postMessage({ type: "TOKEN_SHARED", token: event.data.token }, event.origin);
            }
        });
    </script>
</body>
</html>
```

---

## üîπ **4. Service Worker sur `sous-domaine.site.fr` (`/sw.js`)**
Stocke le token re√ßu de l'iframe.

```js
self.token = null;

self.addEventListener("message", (event) => {
    if (event.data.type === "SET_TOKEN") {
        self.token = event.data.token;
        event.ports[0].postMessage({ status: "TOKEN_SAVED" });
    } else if (event.data.type === "GET_TOKEN") {
        event.ports[0].postMessage({ token: self.token });
    }
});
```

---

### ‚úÖ **Comment √ßa marche ?**
1. **`site.fr` enregistre un Service Worker** et stocke un token.
2. **Il ins√®re un iframe de `sous-domaine.site.fr`**.
3. **Le token est envoy√© √† l'iframe** via `postMessage`.
4. **L'iframe transf√®re le token √† son propre Service Worker**.
5. **`sous-domaine.site.fr` stocke le token** dans son Service Worker.
6. **Le parent peut demander le token au sous-domaine plus tard**.

---

### üî• **Pourquoi cette m√©thode ?**
‚úî **S√©curit√©** : Utilise `postMessage` avec des restrictions d'origine.  
‚úî **Isolation** : Chaque domaine g√®re son propre SW.  
‚úî **Interop√©rabilit√©** : Fonctionne sans `BroadcastChannel`.  

Tu peux tester ce PoC en h√©bergeant ces fichiers sur `site.fr` et `sous-domaine.site.fr`.

package com.example.poc_webview_sso

import android.net.http.SslError
import android.os.Build
import android.os.Bundle
import android.util.Log
import android.webkit.*
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import java.io.ByteArrayInputStream
import okhttp3.OkHttpClient
import okhttp3.Request

class WebViewActivity : AppCompatActivity() {
    private lateinit var webView: WebView
    private var currentToken = "valid_token" // Token initial
    // ✅ Déclare ici OkHttpClient
    private val okHttpClient = OkHttpClient()

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_webview)

        webView = findViewById(R.id.webview)
        WebView.setWebContentsDebuggingEnabled(true)

        with(webView.settings) {
            javaScriptEnabled = true
            domStorageEnabled = true
            cacheMode = if (Build.VERSION.SDK_INT < Build.VERSION_CODES.KITKAT)
                WebSettings.LOAD_NO_CACHE
            else
                WebSettings.LOAD_DEFAULT

            userAgentString =
                "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0 Safari/537.36"
            mixedContentMode = WebSettings.MIXED_CONTENT_ALWAYS_ALLOW
        }

        webView.webChromeClient = WebChromeClient()
        webView.settings.blockNetworkLoads = false

        // Écouter les messages venant de JavaScript (via postMessage)
        //val webViewListener = WebViewJavascriptBridge(webView)

        webView.addJavascriptInterface(object {
            @JavascriptInterface
            fun onTokenExpired() {
                Log.d("WebViewActivity", "📨 Message JS reçu : token expiré")
                renewToken()
            }
        }, "AndroidBridge")

        webView.webViewClient = object : WebViewClient() {

            override fun shouldOverrideUrlLoading(view: WebView?, request: WebResourceRequest?): Boolean {
                return false
            }

            override fun onPageFinished(view: WebView?, url: String?) {
                super.onPageFinished(view, url)
                //injectToken()
            }

            override fun onReceivedError(view: WebView?, request: WebResourceRequest?, error: WebResourceError?) {
                super.onReceivedError(view, request, error)
                Log.d("Kotlin", "Error: ${error?.description}")
            }

            override fun onReceivedSslError(view: WebView?, handler: SslErrorHandler?, error: SslError?) {
                handler?.proceed() // Ignore SSL errors
            }

            // Intercepter les erreurs HTTP 401
            override fun onReceivedHttpError(view: WebView?, request: WebResourceRequest?, errorResponse: WebResourceResponse?) {
                super.onReceivedHttpError(view, request, errorResponse)
                // Afficher le détail de errorResponse pour le diagnostic
                Log.d("Kotlin", "HTTP Error: ${errorResponse?.statusCode} - ${errorResponse?.reasonPhrase}")
                if (errorResponse?.statusCode == 401) {
                    // Logique de renouvellement du token
                    Log.d("WebViewActivity", "🔑 Token expiré, tentative de renouvellement")

                    // Appel à une fonction pour renouveler le token côté Kotlin
                    renewToken()
                }
            }

            override fun shouldInterceptRequest(view: WebView?, request: WebResourceRequest): WebResourceResponse? {
                val url = request.url.toString()
                Log.d("WebViewActivity1", "➡️ Intercepted request to: $url")
                // Ignore les fichiers locaux (ex: .js, .css de la SPA)
                if (!url.startsWith("http")) return null

                return try {
                    Log.d("WebViewActivity", "➡️ Intercepted request to: $url")

                    val okHttpRequest = Request.Builder()
                        .url(url)
                        .apply {
                            request.requestHeaders.forEach { (key, value) -> header(key, value) }
                            header("Authorization", "Bearer $currentToken")
                        }
                        .build()

                    val response = okHttpClient.newCall(okHttpRequest).execute()
                    val body = response.body?.byteStream() ?: ByteArrayInputStream(ByteArray(0))

                    WebResourceResponse(
                        response.header("Content-Type", "text/plain"),
                        response.header("Content-Encoding", "utf-8"),
                        response.code,
                        response.message.ifBlank { "OK" },
                        response.headers.toMultimap().mapValues { it.value.joinToString(",") },
                        body
                    )
                } catch (e: Exception) {
                    e.printStackTrace()
                    null
                }
            }

        }

// Interception via ServiceWorkerController
      /*  ServiceWorkerController.getInstance().setServiceWorkerClient(object : ServiceWorkerClient() {
            override fun shouldInterceptRequest(request: WebResourceRequest): WebResourceResponse? {
                val url = request.url.toString()

                return try {
                 Log.d("WebViewActivity", "➡️ Intercepted request to: $url")
        Log.d("WebViewActivity", "🔐 Injecting Authorization header: Bearer $currentToken")

                    val okHttpRequest = Request.Builder()
                        .url(url)
                        .apply {
                            // Copie les headers existants
                            request.requestHeaders.forEach { (key, value) ->
                                header(key, value)
                            }
                            // Injecte le header Authorization
                            header("Authorization", "accessToken")
                        }
                        .build()

                    // ✅ Log après création de la requête
                    Log.d("WebViewActivity", "🔍 okHttpRequest headers:")
                    okHttpRequest.headers.forEach { header ->
                        Log.d("WebViewActivity", "${header.first}: ${header.second}")
                    }

                    val response = okHttpClient.newCall(okHttpRequest).execute()
                    val body = response.body?.byteStream() ?: ByteArrayInputStream(ByteArray(0))

                    WebResourceResponse(
                        response.header("Content-Type", "text/plain"),
                        response.header("Content-Encoding", "utf-8"),
                        response.code,
                        //response.message,
                        response.message.ifBlank { "OK" }, // 🔒 Fix ici
                        response.headers.toMultimap().mapValues { it.value.joinToString(",") },
                        body
                    )


                } catch (e: Exception) {
                    e.printStackTrace()
                    null
                }
            }
        })*/




        webView.loadUrl("https://espace-personnel-staging.cetelem.fr/ping") // Charger l'URL de la SPA
    }

    // Fonction de renouvellement du token
    private fun renewToken() {
        // Logique pour renouveler le token (par exemple, via une requête réseau)
        val newToken = "nouveau-token"  // Ce token devrait être obtenu via une requête HTTP ou autre méthode

        // Une fois le token renouvelé, on l'injecte dans la WebView
        currentToken = newToken
        injectToken()
    }

    private fun injectToken() {
        val js = """
            window.postMessage({ type: 'ACCESS_TOKEN', token: '$currentToken' }, '*');
        """.trimIndent()

        runOnUiThread {
            webView.evaluateJavascript(js, null)
        }
    }
}

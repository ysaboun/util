### 📌 **Comment partager un token entre deux Service Workers distincts sur** `www.site.fr` **et** `www.sous-domaine.site.fr` ?  

Un **Service Worker est isolé par origine** (`origin` = **protocole + domaine + port**). Donc, un Service Worker enregistré sur `www.site.fr` ne peut **pas** directement accéder aux données d’un Service Worker sur `www.sous-domaine.site.fr`.  

🔹 **Problème :**  
Si `www.site.fr` et `www.sous-domaine.site.fr` ont **chacun leur propre Service Worker**, ils **ne peuvent pas directement communiquer** ou partager un stockage commun.  

🔹 **Solutions possibles :**  
1. **Utiliser un serveur centralisé pour récupérer le token** ✅ (Recommandé)  
2. **Partager le token via un cookie (`Domain=site.fr`)**  
3. **Utiliser un iframe + `postMessage()` pour échanger les tokens**  
4. **Utiliser BroadcastChannel API** (si même top-level domain)  

---

## 1️⃣ **Solution recommandée : Une API backend pour centraliser les tokens**  
#### ✅ Avantages :  
- **Sécurisé** (pas d’exposition du token en local).  
- **Facile à gérer** côté backend.  
- Compatible avec tous les navigateurs.  

#### ❌ Inconvénients :  
- Nécessite un backend/API.  
- Chaque Service Worker doit faire une requête API pour récupérer le token.  

### 🔹 **Comment faire ?**
1. Lorsqu'un utilisateur s'authentifie sur **`www.site.fr`**, le token est **stocké côté serveur**.
2. Le Service Worker de **`www.site.fr`** et celui de **`www.sous-domaine.site.fr`** font une requête API pour récupérer le token lorsqu’ils en ont besoin.  

### **Exemple :**  
Dans `www.site.fr/sw.js` et `www.sous-domaine.site.fr/sw.js` :
```js
self.addEventListener("fetch", async (event) => {
  if (event.request.url.includes("/api/protected-resource")) {
    event.respondWith(
      fetchWithToken(event.request)
    );
  }
});

async function fetchWithToken(request) {
  let token = await getTokenFromServer();
  let modifiedHeaders = new Headers(request.headers);
  modifiedHeaders.set("Authorization", `Bearer ${token}`);

  let modifiedRequest = new Request(request, {
    headers: modifiedHeaders,
  });

  return fetch(modifiedRequest);
}

async function getTokenFromServer() {
  const response = await fetch("https://api.site.fr/get-token", {
    credentials: "include",
  });
  const data = await response.json();
  return data.token;
}
```

Dans `api.site.fr` (Backend) :
```js
app.get("/get-token", (req, res) => {
  const userSession = getUserSession(req);
  if (userSession) {
    res.json({ token: userSession.token });
  } else {
    res.status(401).json({ error: "Unauthorized" });
  }
});
```

**👉 Avantage :** Chaque Service Worker peut récupérer le token **de manière sécurisée** sans stockage local.  

---

## 2️⃣ **Utiliser un cookie avec `Domain=site.fr`**  
#### ✅ Avantages :  
- **Simple à implémenter**.  
- Accessible par `www.site.fr` **et** `www.sous-domaine.site.fr`.  
- Fonctionne même si JavaScript est désactivé.  

#### ❌ Inconvénients :  
- **Moins sécurisé** (exposé aux attaques CSRF).  
- **Pas accessible directement par les Service Workers** (mais peut être récupéré via une requête `fetch()`).  

### 🔹 **Comment faire ?**  
1. **Stocker le token dans un cookie sécurisé** sur `site.fr` :  
```js
document.cookie = "token=xxxx; Path=/; Domain=site.fr; Secure; HttpOnly";
```
2. **Les Service Workers sur `www.site.fr` et `www.sous-domaine.site.fr` font une requête pour récupérer le cookie :**  
```js
async function getTokenFromCookie() {
  const response = await fetch("/get-token-from-cookie", {
    credentials: "include",
  });
  const data = await response.json();
  return data.token;
}
```

**👉 Limite :** Le Service Worker **ne peut pas directement lire** les cookies, donc il faut une API ou une requête client.  

---

## 3️⃣ **Utiliser un iframe + `postMessage()`**  
#### ✅ Avantages :  
- **Compatible avec toutes les plateformes**.  
- Fonctionne sans backend si un domaine central est disponible.  

#### ❌ Inconvénients :  
- **Complexe à mettre en place**.  
- **Dépend d’un domaine partagé** (`auth-proxy.site.fr`).  

### 🔹 **Comment faire ?**  
1. **Créer un iframe sur un domaine centralisé (`auth-proxy.site.fr`) qui stocke le token en `localStorage`.**  
2. Les Service Workers de `www.site.fr` et `www.sous-domaine.site.fr` communiquent avec cet iframe via `postMessage()`.  

**Dans `auth-proxy.site.fr/index.html` :**  
```js
window.addEventListener("message", (event) => {
  if (event.origin.endsWith(".site.fr")) {  
    event.source.postMessage({ token: localStorage.getItem("token") }, event.origin);
  }
});
```

**Dans `www.site.fr` et `www.sous-domaine.site.fr` :**  
```js
const iframe = document.createElement("iframe");
iframe.src = "https://auth-proxy.site.fr";
document.body.appendChild(iframe);

window.addEventListener("message", (event) => {
  if (event.origin === "https://auth-proxy.site.fr") {
    const token = event.data.token;
    console.log("Token reçu :", token);
  }
});

iframe.onload = () => {
  iframe.contentWindow.postMessage({ action: "getToken" }, "https://auth-proxy.site.fr");
};
```

**👉 Limite :** Nécessite un **iframe visible ou caché**, ce qui peut ne pas être optimal.  

---

## 4️⃣ **Utiliser `BroadcastChannel API` (si même domaine racine)**  
#### ✅ Avantages :  
- **Simple et efficace** si les deux sites partagent le même **top-level domain** (`site.fr`).  
- Permet une **communication directe** entre les deux Service Workers.  

#### ❌ Inconvénients :  
- **Ne fonctionne pas si les origines sont différentes** (ex. `www.site.fr` et `api.site.fr`).  

### 🔹 **Comment faire ?**  
Dans `www.site.fr/sw.js` et `www.sous-domaine.site.fr/sw.js` :  
```js
const channel = new BroadcastChannel("auth-channel");

channel.addEventListener("message", (event) => {
  console.log("Token reçu :", event.data.token);
});

// Envoyer un token
channel.postMessage({ token: "mon-token" });
```

**👉 Limite :** Ne fonctionne **que si les pages sont déjà ouvertes** dans le navigateur.  

---

## 🚀 **Quelle solution choisir ?**
| **Méthode** | **Sécurité** | **Complexité** | **Performance** | **Cas d’usage** |
|------------|-------------|----------------|-----------------|----------------|
| **API centralisée** | ✅✅ Très sécurisé | ⚠️ Nécessite un backend | 🚀 Performant | Recommandé pour production |
| **Cookies (`Domain=site.fr`)** | ⚠️ Moins sécurisé (CSRF) | ✅ Simple | 🚀 Rapide | Sites simples, sans besoin de haute sécurité |
| **Iframe + `postMessage()`** | ✅ Sécurisé | ⚠️ Complexe | 🚀 Performant | Apps SPA nécessitant du localStorage partagé |
| **BroadcastChannel API** | ✅ Sécurisé | ✅ Simple | 🚀 Très rapide | Fonctionne uniquement sur le même domaine racine |

### **🏆 Meilleure option pour la sécurité et la scalabilité :**
**👉 Utiliser une API backend centralisée (`api.site.fr`).**  

Tu veux une implémentation spécifique ?
